<%- include('partials/header') %>

<main class="container mt-5">
    <div class="card add-task-card">
        <h3><i class="fas fa-plus-circle"></i> Adicionar Nova Tarefa</h3>
        <form id="addTaskForm">
            <div class="form-group">
                <input type="text" id="title" placeholder="> Título da Tarefa_" required>
            </div>
            <div class="form-group">
                <textarea id="description" placeholder="> Descrição..." required></textarea>
            </div>
            <div class="form-group">
                <select id="priority">
                    <option value="baixa">Prioridade Baixa</option>
                    <option value="media">Prioridade Média</option>
                    <option value="alta">Prioridade Alta</option>
                </select>
            </div>
            <button type="submit" class="btn">Salvar Tarefa</button>
        </form>
    </div>

    <div class="card mt-4">
        <h3><i class="fas fa-tasks"></i> Minhas Tarefas (<span id="completed-count">0</span> concluídas)</h3>
        <div id="task-list">
            </div>
    </div>
</main>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('addTaskForm');
        const taskList = document.getElementById('task-list');
        const completedCountSpan = document.getElementById('completed-count');
        
        const getInitialTasks = () => {
            const tasksInStorage = localStorage.getItem('tasks');
            if (tasksInStorage) {
                return JSON.parse(tasksInStorage);
            }
            // Se não houver nada no localStorage, cria a lista inicial
            const initialTasks = [
                { id: 1, title: 'Configurar ambiente', description: 'Instalar Node.js e dependências.', priority: 'alta', completed: true },
                { id: 2, title: 'Criar rotas', description: 'Definir as rotas da aplicação.', priority: 'media', completed: true },
                { id: 3, title: 'Implementar funcionalidades', description: 'Codificar as features principais.', priority: 'alta', completed: false },
                { id: 4, title: 'Estilizar o frontend', description: 'Aplicar o novo tema visual.', priority: 'baixa', completed: false }
            ];
            localStorage.setItem('tasks', JSON.stringify(initialTasks));
            return initialTasks;
        };

        let tasks = getInitialTasks();

        const saveTasks = () => {
            localStorage.setItem('tasks', JSON.stringify(tasks));
        };

        const renderTasks = () => {
            taskList.innerHTML = '';
            let completedCount = 0;

            if (tasks.length === 0) {
                taskList.innerHTML = '<p class="text-center" style="opacity: 0.7;">// Nenhuma tarefa encontrada.</p>';
            }

            tasks.forEach(task => {
                if (task.completed) completedCount++;

                const taskCard = document.createElement('div');
                taskCard.className = `task-card ${task.completed ? 'completed' : ''} priority-${task.priority}`;
                taskCard.dataset.id = task.id;

                taskCard.innerHTML = `
                    <div class="task-info">
                        <h4 class="task-title ${task.completed ? 'task-title-completed' : ''}">${task.title}</h4>
                        <p>${task.description}</p>
                    </div>
                    <div class="task-actions">
                        <label class="custom-checkbox">
                            <input type="checkbox" ${task.completed ? 'checked' : ''} onchange="toggleComplete(${task.id})">
                            <span class="checkmark"></span>
                            Concluída
                        </label>
                        <button class="btn-delete" onclick="deleteTask(${task.id})"><i class="fas fa-trash"></i></button>
                    </div>
                `;
                taskList.appendChild(taskCard);
            });

            completedCountSpan.textContent = completedCount;
        };

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const newTask = {
                id: Date.now(),
                title: document.getElementById('title').value,
                description: document.getElementById('description').value,
                priority: document.getElementById('priority').value,
                completed: false
            };

            tasks.unshift(newTask);
            saveTasks();
            renderTasks();
            form.reset();
        });

        window.toggleComplete = (id) => {
            const task = tasks.find(t => t.id === id);
            if (task) {
                task.completed = !task.completed;
                saveTasks();
                renderTasks();
            }
        };

        window.deleteTask = (id) => {
            if (confirm('Tem certeza que deseja excluir esta tarefa?')) {
                tasks = tasks.filter(t => t.id !== id);
                saveTasks();
                renderTasks();
            }
        };

        renderTasks();
    });
</script>


<%- include('partials/footer') %>