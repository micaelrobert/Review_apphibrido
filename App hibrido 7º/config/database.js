/**
 * AULA 1 - CONFIGURA√á√ÉO DO BANCO DE DADOS
 * 
 * Este arquivo cont√©m a configura√ß√£o b√°sica para conex√£o com MongoDB
 * usando o Mongoose ODM. √â o primeiro passo para conectar nossa
 * aplica√ß√£o com o banco de dados.
 */

// Importa√ß√£o do Mongoose - ODM para MongoDB
const mongoose = require('mongoose');

// Importa√ß√£o do dotenv para vari√°veis de ambiente
require('dotenv').config();

/**
 * CONFIGURA√á√ïES DE CONEX√ÉO
 * ========================
 * 
 * Estas configura√ß√µes definem como nossa aplica√ß√£o se conecta ao MongoDB:
 * - URL de conex√£o
 * - Op√ß√µes de conex√£o
 * - Tratamento de erros
 */

// URL de conex√£o com MongoDB
// Em desenvolvimento, usamos MongoDB local
// Em produ√ß√£o, usamos vari√°vel de ambiente
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/tarefas_db';

// Op√ß√µes de conex√£o do Mongoose (vers√£o atualizada)
const connectionOptions = {
    maxPoolSize: 10,              // M√°ximo de conex√µes no pool
    serverSelectionTimeoutMS: 5000, // Timeout para sele√ß√£o de servidor
    socketTimeoutMS: 45000,       // Timeout para opera√ß√µes de socket
    bufferCommands: false         // Desabilita buffering de comandos
};

/**
 * FUN√á√ÉO DE CONEX√ÉO COM MONGODB
 * =============================
 * 
 * Esta fun√ß√£o estabelece a conex√£o com o banco de dados MongoDB
 * e configura os event listeners para monitorar o status da conex√£o.
 */
const connectToDatabase = async () => {
    try {
        console.log('üîÑ Tentando conectar ao MongoDB...');
        console.log(`üìä URL: ${MONGODB_URI}`);
        
        // Estabelece conex√£o com MongoDB
        await mongoose.connect(MONGODB_URI, connectionOptions);
        
        console.log('‚úÖ Conectado ao MongoDB com sucesso!');
        console.log(`üóÑÔ∏è  Banco de dados: ${mongoose.connection.name}`);
        console.log(`üåê Host: ${mongoose.connection.host}`);
        console.log(`üîå Porta: ${mongoose.connection.port}`);
        
    } catch (error) {
        console.warn('‚ö†Ô∏è  MongoDB n√£o dispon√≠vel:', error.message);
        console.warn('üí° O aplicativo continuar√° funcionando sem banco de dados');
        console.warn('üîß Para usar o banco de dados, instale e inicie o MongoDB');
        
        // N√£o encerra o processo, apenas continua sem banco
        return false;
    }
};

/**
 * EVENT LISTENERS PARA MONITORAMENTO DA CONEX√ÉO
 * =============================================
 * 
 * Estes listeners monitoram o status da conex√£o e executam a√ß√µes
 * espec√≠ficas quando eventos ocorrem.
 */

// Evento disparado quando a conex√£o √© estabelecida
mongoose.connection.on('connected', () => {
    console.log('üîó Mongoose conectado ao MongoDB');
});

// Evento disparado quando h√° erro na conex√£o
mongoose.connection.on('error', (error) => {
    console.error('üí• Erro na conex√£o Mongoose:', error);
});

// Evento disparado quando a conex√£o √© desconectada
mongoose.connection.on('disconnected', () => {
    console.log('üîå Mongoose desconectado do MongoDB');
});

// Evento disparado quando a aplica√ß√£o √© encerrada
process.on('SIGINT', async () => {
    console.log('\nüõë Recebido sinal de interrup√ß√£o (Ctrl+C)');
    console.log('üîå Fechando conex√£o com MongoDB...');
    
    try {
        await mongoose.connection.close();
        console.log('‚úÖ Conex√£o com MongoDB fechada');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Erro ao fechar conex√£o:', error);
        process.exit(1);
    }
});

// Evento disparado quando a aplica√ß√£o √© terminada
process.on('SIGTERM', async () => {
    console.log('\nüõë Recebido sinal de t√©rmino');
    await mongoose.connection.close();
    process.exit(0);
});

/**
 * FUN√á√ÉO PARA VERIFICAR STATUS DA CONEX√ÉO
 * ======================================
 * 
 * Esta fun√ß√£o retorna informa√ß√µes sobre o status atual da conex√£o.
 */
const getConnectionStatus = () => {
    const states = {
        0: 'Desconectado',
        1: 'Conectado',
        2: 'Conectando',
        3: 'Desconectando'
    };
    
    return {
        status: states[mongoose.connection.readyState],
        readyState: mongoose.connection.readyState,
        host: mongoose.connection.host,
        port: mongoose.connection.port,
        name: mongoose.connection.name
    };
};

/**
 * FUN√á√ÉO PARA TESTAR A CONEX√ÉO
 * ============================
 * 
 * Esta fun√ß√£o executa uma opera√ß√£o simples para testar se a conex√£o
 * est√° funcionando corretamente.
 */
const testConnection = async () => {
    try {
        // Verifica se h√° conex√£o ativa
        if (mongoose.connection.readyState !== 1) {
            return false;
        }
        
        // Executa um ping simples no banco
        await mongoose.connection.db.admin().ping();
        console.log('üèì Ping no MongoDB executado com sucesso!');
        return true;
    } catch (error) {
        console.warn('‚ö†Ô∏è  MongoDB n√£o dispon√≠vel para ping:', error.message);
        return false;
    }
};

// Exporta as fun√ß√µes para uso em outros arquivos
module.exports = {
    connectToDatabase,
    getConnectionStatus,
    testConnection,
    mongoose
};
